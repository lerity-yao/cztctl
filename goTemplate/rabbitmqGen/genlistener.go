package rabbitmqGen

import (
	"fmt"
	"github.com/lerity-yao/cztctl/config"
	"github.com/lerity-yao/cztctl/internal/version"
	"github.com/lerity-yao/cztctl/pkg/spec"
	"github.com/lerity-yao/cztctl/util/format"
	"github.com/lerity-yao/cztctl/util/pathx"
	"github.com/zeromicro/go-zero/core/collection"
	"strings"
)

const (
	listenerFilename = "listeners"
	listenerTemplate = `// Code generated by cztctl. DO NOT EDIT.
// cztctl {{.version}}

package handler

import (
	"context"
	{{.Imports}}
)

func RegisterHandlers(server *service.ServiceGroup, serverCtx *svc.ServiceContext) {
	ctx := context.Background()
	{{.ListenerAdditions}}
}
`
)

func genListener(dir, rootPkg string, cfg *config.Config, api *spec.ApiSpec) error {

	listenerFileName, err := format.FileNamingFormat(cfg.NamingFormat, listenerFilename)
	if err != nil {
		return err
	}

	listenerAdditionNames := getListenerAdditions(api)

	imports := getListenerImports(api, rootPkg)

	return genFile(fileGenConfig{
		dir:             dir,
		subdir:          handlerDir,
		filename:        listenerFileName + ".go",
		templateName:    "listenerTemplate",
		category:        category,
		templateFile:    listenerTemplateFile,
		builtinTemplate: listenerTemplate,
		data: map[string]any{
			"Imports":           strings.Join(imports, "\n"),
			"ListenerAdditions": strings.Join(listenerAdditionNames, "\n"),
			"version":           version.BuildVersion,
		},
	})
}

func getListenerImports(api *spec.ApiSpec, parentPkg string) []string {
	importNames := collection.NewSet()
	importNames.Add(fmt.Sprintf("\"%s\"", "github.com/zeromicro/go-zero/core/service"),
		fmt.Sprintf("\"%s\"", pathx.JoinPackages(parentPkg, contextDir)))

	for _, g := range api.Service.Groups {
		for _, h := range g.Routes {
			handlerPath := getHandlerFolderPath(g, h)
			pkgName := handlerPath[strings.LastIndex(handlerPath, "/")+1:]
			importNames.Add(fmt.Sprintf("\"%s\"", pathx.JoinPackages(parentPkg, handlerDir, pkgName)))
		}
	}

	return importNames.KeysStr()
}
